body {
  color: #2b283a;
  font-family: "Roboto", sans-serif;
  margin: 0;
}

/* ----- TYPOGRAPHY ----- */

h1,
h3 {
  margin: 0;
}

h1 {
  color: whitesmoke;
  font-size: 1.75rem;
}

h2 {
  color: #451c7a;
  font-size: 1.375rem; /* 22/16 = 1.375  */
  margin-top: 0;
}

h3 {
  font-size: 1.25rem;
}

p {
  line-height: 1.5;
}

.subheading {
  display: block;
  font-size: 1rem;
  color: #d0aaff;
}

.section-two h2 {
  color: inherit;
}

/* ----- LINKS ----- */

a {
  color: #ef5839;
  text-decoration: underline dotted;
}

a:hover,
a:active {
  color: #d4b44c;
}

.btn {
  font-size: 1.125em; /* 18/16 = 1.125 */
  font-weight: 500;
  text-decoration: none;
  display: block;
  padding: 0.5em 1em;
  margin-bottom: 1em;
  border-radius: 4.6px;
  text-align: center;
}

.btn-dark {
  color: whitesmoke;
  background: #5f29a3;
}

.btn-mid {
  color: #5f29a3;
  background: #f0e0ff;
}

.btn-light {
  color: #5f29a3;
  background: whitesmoke;
}

.btn:hover,
.btn:active {
  color: #2b238a;
  background-color: #f3e885;
}

/* ----- LAYOUT ----- */

header {
  text-align: center;
}

header,
section,
footer {
  padding: 1.25em 0;
}

header,
.section-two {
  background-color: #5f29a3;
}

.section-two {
  color: whitesmoke;
}

.container {
  width: 90%;
  max-width: 800px;
  margin: 0 auto;
}

.main-image {
  width: 100%;
  display: block;
  max-width: 640px;
  margin: 0 auto 2em; /* 32/16 =  */
}

/*
  Challenge: Wrap the feature-item divs with flexbox
    1. Each .feature-item should grow from an initial main size of 220px
    2. Allow the items inside .section-two-image-container to
       wrap onto multiple lines
    3. Apply a gap between each .feature-item
*/
.section-two-image-container {
  display: flex;
  /* if its less than 260px, it will wrap */
  flex-wrap: wrap;
  gap: 1em;
}

.feature-item {
  /* to allow  each feature item to grow to a size of 220px; */
  flex-basis: 260px;
  /* to take up any remaining spaces */
  flex-grow: 1;
}

/* to force each div to have their own line when the size of each is less than 220px */
.feature-image {
  width: 100%;
  border-radius: 4.6px;
  margin-bottom: 1em;
}

footer {
  text-align: center;
  color: #5f29a3;
}

/* ----- NAVIGATION ----- */

nav {
  margin-top: 1.5em;
}

nav a {
  color: #fff;
  text-decoration: none;
  font-size: 1.125rem;
  padding: 0.8em 0;
  display: block;
}

ul {
  padding: 0;
  margin: 0;
  list-style-type: none;
}

li:not(:last-child) {
  border-bottom: 1px dotted #a190b6;
}

/* ----- MEDIA QUERIES ----- */
@media (min-width: 480px) {
  .section-two-image-container {
    display: flex;
    justify-content: space-between;
  }

  .feature-image {
    width: 48.8%;
  }
}

@media (min-width: 768px) {
  header,
  section,
  footer {
    padding: 2.875em 0;
  }

  .btn {
    display: inline-block;
    margin-right: 0.5em;
  }
  h1 {
    font-size: 2.25rem;
  }
  h2 {
    font-size: 1.75rem;
  }
  .subheading {
    font-size: 1.25rem;
  }
  p {
    font-size: 1.125rem;
  }
  header {
    text-align: left;
  }
  nav {
    margin-top: 0;
  }
  li:not(:last-child) {
    border-bottom: none;
  }

  header .container,
  nav ul {
    display: flex;
  }
  header .container {
    justify-content: space-between;
    text-align: center;
  }
  nav li {
    margin-left: 1.25em;
  }
}

/*
em unit adapts to the parents/nearest ancestor font size with default 16px 
em units can be used for padding and margin, follow the nearest ancestor font-size, else follow default 16px

em may have compounding issues, rem is preferred =  relative to html font size 

Best practice:
for font-sizes,
- use rem
- no compounding
- more predictable

for margin/padding,
- use em
- proportional scaling
- based on el current font size

for line-height,
- use unitless number value

for width,
- use %
- flexible containers
- flexible images

for max-width
- use px
- easier to manage
- ensures consistency

mobile-first
- write base css with mobile devices first
- use media queries to adjust the layout for wider screens

why mobile first?
- mobile users > desktop users
- simpler, more optimized css
- DRYer code


common breakpoints:
mobile 480px
tablets 768px
laptops 1024px
desktops 1280px

concepts covered:
responsive first
percentage,em, rem
media queries and mobile-first
flex-wrap and gap
flex-basis,flex-grow, flex
*/
